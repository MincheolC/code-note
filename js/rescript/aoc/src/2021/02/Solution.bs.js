// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var commands = Fs.readFileSync("src/2021/02/input.txt", "utf8").split("\n");

var result = Belt_Array.reduce(Belt_Array.keep(Belt_Array.map(Belt_Array.map(commands, (function (v) {
                    var cmdAndNum = v.split(" ");
                    return [
                            Belt_Array.getExn(cmdAndNum, 0),
                            Belt_Array.getExn(cmdAndNum, 1)
                          ];
                  })), (function (param) {
                return [
                        param[0],
                        Belt_Int.fromString(param[1])
                      ];
              })), (function (param) {
            return param[1] !== undefined;
          })), {
      horizontal: 0,
      depth: 0
    }, (function (acc, param) {
        var num = param[1];
        switch (param[0]) {
          case "down" :
              if (num !== undefined) {
                return {
                        horizontal: acc.horizontal,
                        depth: acc.depth + num | 0
                      };
              }
              break;
          case "forward" :
              if (num !== undefined) {
                return {
                        horizontal: acc.horizontal + num | 0,
                        depth: acc.depth
                      };
              }
              break;
          case "up" :
              if (num !== undefined) {
                return {
                        horizontal: acc.horizontal,
                        depth: acc.depth - num | 0
                      };
              }
              break;
          default:
            
        }
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "Solution.res",
                23,
                4
              ],
              Error: new Error()
            };
      }));

console.log(Math.imul(result.horizontal, result.depth));

exports.commands = commands;
exports.result = result;
/* commands Not a pure module */
